1) break main    or b
2) run <args>   or set args
3) [s]tep or [n]ext or [c]ontinue

# перенаправить ввод и/или вывод
run > выходной-файл


# list
show code around current line

# print <var>
p <var> = 1

# show
show args
... enviroment, paths,

# info
info locals  # see all local vars
... threads, program, 

#
info threads
thread N

# stack
bt
frame n (f n )

# u until (until next line; loop)
# ret 0, 1, etc # return from current func
# j <line>

# p *x@12 # 12` element in array x


# set
set args

set $vd = my_model->dataset->vector->data
p *$vd@10
  
set $ptr=&x[3]
p *$ptr = 8
p *($ptr++) #print the pointee, and step forward one


# core:
gdb -c <core_file_name>


# breakpint from code:
include <csignal>
std::raise(SIGINT); // or SIGABRT
# or:
__asm__("int $3");


########
# Screen 
ctrl+x, a
ctrl l --- to make screen normal if it gonna baad 
ctrl+x, 2
ctrl+x, 1


###################
# python inside gdb:
python
import os
print(os.getpid())
...
...
end

python print(gdb.breakpoints())
python print(gdb.breakpoints()[0])
python print(gdb.breakpoints()[0].location)

python gdb.Breakpoint('7') # line 7

## functions
define gpioa_moder
    print /t *(uint32_t*)0x48000000
end

**********************************************************************
**********************************************************************
**********************************************************************


/////////// break <arg> ////////////
////////////////////////////////////
arg - func name, adress, line namber, ... etc.

break main.c:14 // остановится на этой точке кода (файл обозначаем что бы
gdb не запутался когда работаем с несколькими файлами)

>> tbreak - Установить точку останова только до первой активизации


>> break if <...>
каждый раз, когда достигается точка останова,
происходит вычисление выражения усл
break foo if x>0

>> rbreak <рег-выр>
рег-выр - например все функции func* *-автоподстановка


>> info break
Номер точки останова
Тип:
    Точка останова, наблюдения или перехвата. 
План:
    Помечена ли точка останова для отключения или удаления после активации. 
Включена или отключена:
    Включенные точки останова помечаются как `y'. `n' отмечает отключенные точки. 
Адрес:
    Адрес памяти, где расположена точка останова в вашей программе. 
Где:
    Файл и номер строки, где расположена точка останова в исходном файле. 


>> commands ... end
commands [номер]
... список-команд ...
end

пример:
break foo if x>0
commands
silent                 // чтобы не было вывода
printf "x is %d\n",x   // вывести нужное нам
cont                   // continue
end



/////// catch <arg> //////

arg - throw, catch, exec, fork, load<lib>, unliad<lib>, ...

>> tcatch - до первой активации

>>> clear<arg>
>>> disable<> 
>>> enable<>


-tui  # Создаст окно где будет код

# в самом gdb если написать - создаст еще окно где будет асемблерный код
layout split
